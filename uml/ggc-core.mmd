classDiagram
    class WarehouseManager {
        -_filename: String
        +save() void
        +saveAs(fileName: String) void
        +load(fileName: String) void
        +importFile(textfile: String) void
        +lookupPaymentsByPartner(partnerId: String) Transaction[]
        +lookupProductBatchesUnderGivenPrice(priceLimit: double) Batch[]
        +advanceDate(days: int) void
        +displayDate() int
        +availableBalance() int
        +accountingBalance() int
        +registerPartner(id: String, name: String, address: String) void
        +getAllPartners() Partner[]
        +getPartner(partnerId: String) Partner
        +getPartnerSalesOrBreakdowns(partnerId: String) Transaction[]
        +getPartnerAcquisitions(partnerId: String) Transaction[]
        +toggleProductNotifications(partnerId: String, productId: String) void
        +getAllProducts() Product[]
        +getAllBatches() Batch[]
        +getBatchesByPartner(partnerId: String) Batch[]
        +getBatchesByProduct(productId: String) Batch[]
        +receivePayment(transactionId: String) void
        +registerAcquisitionTransaction(partnerId: String, productId: String, price: double, quantity: int) void
        +createSimpleProduct(productId: String) void
        +createDerivedProduct(productId: String, aggravatingFactor: double, recipeProducts: String[], recipeQuantities: int[]) void
        +registerBreakdownTransaction(partnerId: String, productId: String, quantity: int) void
        +registerSaleTransaction(partnerId: String, deadline: int, productId: String, quantity: int) void
        +getTransaction(transactionId: String) Transaction
    }

    class Warehouse {
        -availableBalance: double

        +lookupPaymentsByPartner(partnerId: String) Transaction[]
        +lookupProductBatchesUnderGivenPrice(priceLimit: double) Batch[]
        +advanceDate(days: int) void
        +displayDate() int
        +calculateAccountingBalance() double
        +registerAcquisitionTransaction(partnerId: String, productId: String, price: double, quantity: int) void
        +createSimpleProduct(productId: String) void
        +createDerivedProduct(productId: String, aggravatingFactor: double, recipeProducts: String[], recipeQuantities: int[]) void
        +registerBreakdownTransaction(partnerId: String, productId: String, quantity: int) void
        +registerSaleTransaction(partnerId: String, deadline: int, productId: String, quantity: int) void
        -getNextTransactionId() int
        +getAllBatches() Batch[]
        +getAllBatchesUnderGivenPrice(priceLimit: double) Batch[]
        +registerPartner(id: String, name: String, address: String) Partner
        +subscribeToAllProducts(partner: Partner) void
        +getAllPartners() Partner[]
        +getPartner(partnerId: String) Partner
        +getPartnerSalesOrBreakdowns(partnerId: String) Transaction[]
        +getPartnerAcquisitions(partnerId: String) Transaction[]
        +toggleProductNotifications(partnerId: String, productId: String) void
        +getAllProducts() Product[]
        +getBatchesByPartnerKey(partnerId: String) Batch[]
        +getBatchesByProductKey(productId: String) Batch[]
        +receivePayment(transactionId: String) void
        +getTransaction(transactionId: String) Transaction
    }

    class Date {
        -days: int

        +advanceDate(days: int) void
        +currentDate() int
        +dateDiff(other: Date) int
    }

    class Product {
        -id: String
        +getQuantityInBatches() int
        +getTotalQuantity() int
        +getBatchesForAquisition(quantity: int) Batches[]
        +getCheapestPrice() int
        +subscribe(partner: Partner) void
        +unsubscribe(partner: Partner) void
        +toggleSubscription(partner: Partner) void
        +isSubscribed(partner: Partner) boolean
    }

    class DerivedProduct {
        +getTotalQuantity() int
        +getBuildableQuantity() int
        +getPriceForBreakdown() double
        +buildFromRecipe(quantity: int) void
    }

    class Batch {
        -quantity: int
        -price: double
    }

    class Partner {
        -id: String
        -name: String
        -address: String
        -points: int

        +addTransaction(transaction: Transaction) void
        +readNotifications(method: NotificationDeliveryMethod) Notification[]
        +sendNotification(notification: Notification) void
        +getPaidSales() SaleTransaction[]
        +getSalesOrBreakdowns() Transaction[]
        +getAcquisitions() AcquisitionTransaction[]
    }

    class PartnerStatute {
        <<abstract>>
        -name: String
        +applyStatuteRewards(transaction: SaleTransaction)* void
        +applySanctions(transaction: SaleTransaction, points: int)* int
        +getLowerStatute()* PartnerStatute
        +getUpperStatute()* PartnerStatute
        +shouldPromote()* boolean
    }

    class NormalPartnerStatute {
        +applyStatuteRewards(transaction: SaleTransaction) void
        +applySanctions(transaction: SaleTransaction, points: int) int
        +getLowerStatute() PartnerStatute
        +getUpperStatute() PartnerStatute
        +shouldPromote() boolean
    }

    class SelectionPartnerStatute {
        +applyStatuteRewards(transaction: SaleTransaction) void
        +applySanctions(transaction: SaleTransaction, points: int) int
        +getLowerStatute() PartnerStatute
        +getUpperStatute() PartnerStatute
        +shouldPromote() boolean
    }

    class ElitePartnerStatute {
        +applyStatuteRewards(transaction: SaleTransaction) void
        +applySanctions(transaction: SaleTransaction, points: int) int
        +getLowerStatute() PartnerStatute
        +getUpperStatute() PartnerStatute
        +shouldPromote() boolean
    }

    class Recipe {
        -aggravatingFactor: double
    }

    class RecipeProduct {
        -quantity: int
    }

    class Transaction {
        -id: int
        -value: double
        -quantity: double
        +baseValue() double
    }

    class BreakdownTransaction {
        -paidValue: Double
        +paymentValue() double
    }

    class SaleTransaction {
        -adjustedValue: Double
		-paid: boolean
        +isPaid() boolean
        +pay() double
        +calculateCurrentPaymentPeriod() PaymentPeriod
    }

    class PaymentPeriod {
        <<enumeration>>
        P1
        P2
        P3
        P4
    }

    class AcquisitionTransaction {
        +unitPrice() double
    }

    class BreakdownTransactionProduct {
        -<<final>> quantity: int
        -<<final>> price: double
    }

    class NotificationType {
        <<enumeration>>
        NEW
        BARGAIN
    }

    class NotificationDeliveryMethod {
        <<enumeration>>
        APP
    }

    class Notification {
      -productPrice: double
    }

    UnknownPartnerKeyException --|> Exception
    UnknownProductKeyException --|> Exception
    UnknownTransactionKeyException --|> Exception
    InvalidDateException --|> Exception
    UnavailableFileException --|> Exception
    DuplicatePartnerKeyException --|> Exception
    UnavailableProductException --|> Exception

    WarehouseManager --> Warehouse: -_warehouse

    Warehouse *--> Transaction: -transactions
    Warehouse *--> Partner: -partners
    Warehouse *--> Product: -products
    Warehouse --> Date: -date

    Product <|-- DerivedProduct
    Product o--> Partner: -notificationSubscribers

    Recipe "0..0" *--> "1..*" RecipeProduct: -recipeProducts
    DerivedProduct --> Recipe: -recipe
    RecipeProduct --> Product: -product

    Transaction <|-- BreakdownTransaction
    Transaction <|-- SaleTransaction
    Transaction <|-- AcquisitionTransaction

    Transaction --> Product: -product
    Transaction --> Date: -paymentDate

    SaleTransaction --> Date: -limitDate
    SaleTransaction ..> PaymentPeriod

    BreakdownTransaction "0..0" *-- "1..*" BreakdownTransactionProduct: -resultingProducts
    BreakdownTransactionProduct --> Product : -product

    Batch --> Partner: -partner
    Transaction --> Partner: -partner
    Batch --> Product: -product

    Partner --> PartnerStatute: -statute
    Partner "1" o-- "*" Transaction: -transactions

    PartnerStatute <|-- NormalPartnerStatute
    PartnerStatute <|-- SelectionPartnerStatute
    PartnerStatute <|-- ElitePartnerStatute

    Product "1" o-- "*" Batch: -batches

    Notification --> Product: -product
    Notification --> NotificationDeliveryMethod: -deliveryMethod
    Notification --> NotificationType: -type
    Notification --* Partner: -notificaations

    NotificationDeliveryMethod <-- Partner: -preferredNotificationMethod
    
